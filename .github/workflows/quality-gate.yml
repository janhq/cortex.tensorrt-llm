name: CI Quality Gate

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ${{ matrix.runs-on }}
    timeout-minutes: 1440
    strategy:
      matrix:
        include:
          - os: "windows"
            name: "cuda-12-2"
            runs-on: "windows-tensorrt-llm-cuda-12-2"
            run-e2e: false
            s3-key-prefix: "windows-tensorrt-llm-local-cache"
            sccache-conf-path: 'C:\sccache.conf'
          - os: "linux"
            name: "cuda-12-3"
            runs-on: "linux-tensorrt-llm-cuda-12-3"
            run-e2e: false
            s3-key-prefix: "linux-tensorrt-llm"
            sccache-conf-path: '/tmp/sccache.conf'
    permissions:
      contents: write
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          lfs: true

      - name: Install choco on Windows
        if: runner.os == 'Windows'
        run: |
          choco install make pkgconfiglite sccache awscli -y

      - name: create sccache.conf file Linux
        if: runner.os == 'Linux'
        run: |
          echo "[cache.s3]" > ${{ matrix.sccache-conf-path }}
          echo 'bucket = "${{ secrets.MINIO_BUCKET_NAME }}"' >> ${{ matrix.sccache-conf-path }}
          echo 'endpoint = "${{ secrets.MINIO_ENDPOINT }}"' >> ${{ matrix.sccache-conf-path }}
          echo 'key_prefix = "${{ matrix.s3-key-prefix }}"' >> ${{ matrix.sccache-conf-path }}
          echo 'use_ssl = false' >> ${{ matrix.sccache-conf-path }}
          echo 'server_side_encryption = false' >> ${{ matrix.sccache-conf-path }}
          echo 'no_credentials = false' >> ${{ matrix.sccache-conf-path }}
      
      - name: Download sccache for windows
        if: runner.os == 'Windows'
        run: |
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          aws s3 cp s3://${{ secrets.MINIO_BUCKET_NAME }}/${{ matrix.s3-key-prefix }} C:\Users\ContainerAdministrator\AppData\Local\Mozilla\sccache\cache --recursive --endpoint ${{ secrets.MINIO_ENDPOINT }}
        env:
          AWS_ACCESS_KEY_ID: "${{ secrets.MINIO_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.MINIO_SECRET_ACCESS_KEY }}"
          AWS_DEFAULT_REGION: "${{ secrets.MINIO_REGION }}"

      - name: start sccache server for linux
        if: runner.os == 'Linux'
        working-directory: cpp
        run: |
          sccache --start-server
        env:
          SCCACHE_BUCKET: "${{ secrets.MINIO_BUCKET_NAME }}"
          SCCACHE_REGION: "${{ secrets.MINIO_REGION }}"
          SCCACHE_ENDPOINT: "${{ secrets.MINIO_ENDPOINT }}"
          SCCACHE_S3_USE_SSL: "false"
          SCCACHE_S3_SERVER_SIDE_ENCRYPTION: "false"
          SCCACHE_S3_KEY_PREFIX: "${{ matrix.s3-key-prefix }}"
          SCCACHE_LOG: "debug"
          SCCACHE_CONF: '${{ matrix.sccache-conf-path }}'
          AWS_ACCESS_KEY_ID: "${{ secrets.MINIO_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.MINIO_SECRET_ACCESS_KEY }}"
          SCCACHE_IDLE_TIMEOUT: "0"

      - name: start sccache server for windows
        if: runner.os == 'Windows'
        run: |
          sccache --start-server
        env:
          SCCACHE_IDLE_TIMEOUT: "0"

      - name: Build Dependencies
        working-directory: cpp
        run: |
          make build-deps

      - name: Build
        working-directory: cpp
        run: |
          make build
      
      - name: Clean
        if: always()
        continue-on-error: true
        run: |
          sccache --stop-server
          rm ${{ matrix.sccache-conf-path }}

          