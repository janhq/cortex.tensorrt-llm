name: CI

on:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]
  workflow_dispatch:

jobs:
  create-draft-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    permissions:
      contents: write
    steps:
      - name: Extract tag name without v prefix
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV && echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"
        env:
          GITHUB_REF: ${{ github.ref }}
      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "${{ env.VERSION }}"
          draft: true
          prerelease: false

  build-and-test:
    runs-on: ${{ matrix.runs-on }}
    needs: [create-draft-release]
    timeout-minutes: 1440
    strategy:
      matrix:
        include:
          - os: "windows"
            name: "cuda-12-2"
            runs-on: "windows-tensorrt-llm-cuda-12-3"
            run-e2e: false
            s3-key-prefix: "windows-tensorrt-llm-0.9.0-ccache"
            sccache-conf-path: 'C:\sccache.conf'
          - os: "linux"
            name: "cuda-12-3"
            runs-on: "linux-tensorrt-llm-cuda-12-3"
            run-e2e: false
            s3-key-prefix: "linux-tensorrt-llm"
            sccache-conf-path: '/tmp/sccache.conf'
    permissions:
      contents: write
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          lfs: true

      - name: Install choco on Windows
        if: runner.os == 'Windows'
        run: |
          choco install make pkgconfiglite ccache awscli -y

      - name: create sccache.conf file Linux
        if: runner.os == 'Linux'
        run: |
          echo "[cache.s3]" > ${{ matrix.sccache-conf-path }}
          echo 'bucket = "${{ secrets.MINIO_BUCKET_NAME }}"' >> ${{ matrix.sccache-conf-path }}
          echo 'endpoint = "${{ secrets.MINIO_ENDPOINT }}"' >> ${{ matrix.sccache-conf-path }}
          echo 'key_prefix = "${{ matrix.s3-key-prefix }}"' >> ${{ matrix.sccache-conf-path }}
          echo 'use_ssl = false' >> ${{ matrix.sccache-conf-path }}
          echo 'server_side_encryption = false' >> ${{ matrix.sccache-conf-path }}
          echo 'no_credentials = false' >> ${{ matrix.sccache-conf-path }}
      
      - name: Download ccache from s3
        continue-on-error: true
        if: runner.os == 'Windows'
        run: |
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          aws s3 cp s3://${{ secrets.MINIO_BUCKET_NAME }}/${{ matrix.s3-key-prefix }} C:\Users\ContainerAdministrator\AppData\Local\ccache --recursive --endpoint ${{ secrets.MINIO_ENDPOINT }}
        env:
          AWS_ACCESS_KEY_ID: "${{ secrets.MINIO_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.MINIO_SECRET_ACCESS_KEY }}"
          AWS_DEFAULT_REGION: "${{ secrets.MINIO_REGION }}"

      - name: start sccache server for linux
        if: runner.os == 'Linux'
        working-directory: cpp
        run: |
          sccache --start-server
        env:
          SCCACHE_BUCKET: "${{ secrets.MINIO_BUCKET_NAME }}"
          SCCACHE_REGION: "${{ secrets.MINIO_REGION }}"
          SCCACHE_ENDPOINT: "${{ secrets.MINIO_ENDPOINT }}"
          SCCACHE_S3_USE_SSL: "false"
          SCCACHE_S3_SERVER_SIDE_ENCRYPTION: "false"
          SCCACHE_S3_KEY_PREFIX: "${{ matrix.s3-key-prefix }}"
          SCCACHE_LOG: "debug"
          SCCACHE_CONF: '${{ matrix.sccache-conf-path }}'
          AWS_ACCESS_KEY_ID: "${{ secrets.MINIO_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.MINIO_SECRET_ACCESS_KEY }}"
          SCCACHE_IDLE_TIMEOUT: "0"

      - name: Build Dependencies
        working-directory: cpp
        run: |
          make build-deps

      - name: Build
        working-directory: cpp
        run: |
          make build

      - name: Pre-package
        working-directory: cpp
        run: |
          make pre-package

      - name: Package
        working-directory: cpp
        run: |
          make package

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: cortex.tensorrt-llm-${{ matrix.os }}-${{ matrix.name }}
          path: cpp/tensorrt_llm/cortex.tensorrt-llm/cortex.tensorrt-llm.tar.gz

      - uses: actions/upload-release-asset@v1.0.1
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-draft-release.outputs.upload_url }}
          asset_path: cpp/tensorrt_llm/cortex.tensorrt-llm/cortex.tensorrt-llm.tar.gz
          asset_name: cortex.tensorrt-llm-${{ needs.create-draft-release.outputs.version }}-${{ matrix.os }}-${{ matrix.name }}.tar.gz
          asset_content_type: application/gzip
      
      - name: Clean
        if: always()
        continue-on-error: true
        run: |
          sccache --stop-server
          rm ${{ matrix.sccache-conf-path }}

      - name: Upload ccache to s3
        continue-on-error: true
        if: always() && runner.os == 'Windows'
        run: |
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          aws s3 cp C:\Users\ContainerAdministrator\AppData\Local\ccache s3://${{ secrets.MINIO_BUCKET_NAME }}/${{ matrix.s3-key-prefix }} --recursive --endpoint ${{ secrets.MINIO_ENDPOINT }}
        env:
          AWS_ACCESS_KEY_ID: "${{ secrets.MINIO_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.MINIO_SECRET_ACCESS_KEY }}"
          AWS_DEFAULT_REGION: "${{ secrets.MINIO_REGION }}"
  update_release_draft:
    needs: [build-and-test]
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      # (Optional) GitHub Enterprise requires GHE_HOST variable set
      #- name: Set GHE_HOST
      #  run: |
      #    echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV

      # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@v5
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        # with:
        #   config-name: my-config.yml
        #   disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean
        if: always()
        continue-on-error: true
        run: |
          sccache --stop-server
          rm ${{ matrix.sccache-conf-path }}